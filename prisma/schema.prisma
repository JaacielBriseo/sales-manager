generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  firstName     String
  lastName      String
  password      String
  email         String     @unique
  phoneNumber   String     @unique
  isActive      Boolean    @default(true)
  emailVerified DateTime?
  accounts      Account[]
  address       Address?
  customers     Customer[]
  orders        Order[]
  products      Product[]
  sessions      Session[]
}

model Customer {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  firstName   String
  lastName    String
  email       String?  @unique
  phoneNumber String   @unique
  isActive    Boolean  @default(true)
  address     Address?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
}

model Address {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  streetName   String
  streetNumber String
  neighborhood String
  city         String
  state        String
  country      String
  postalCode   String
  isActive     Boolean   @default(true)
  userId       String?   @unique
  customerId   String?   @unique
  orderId      String?   @unique
  customer     Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  order        Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id               String        @id @default(uuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  name             String
  code             String
  shortDescription String
  longDescription  String?
  imageURLs        String[]
  inStock          Int           @default(0)
  price            Float
  tags             String[]
  isActive         Boolean       @default(true)
  userId           String
  inOrders         OrderItem[]
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  suppliesUsed     SupplyUsage[]
}

model Supply {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  name         String
  brand        String?
  inStock      Float          @default(0)
  unit         SupplyUnitType
  description  String?
  price        Float?
  isActive     Boolean        @default(true)
  suppliesUsed SupplyUsage[]
}

model SupplyUsage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  productId String
  supplyId  String
  product   Product  @relation(fields: [productId], references: [id])
  supply    Supply   @relation(fields: [supplyId], references: [id])
}

model OrderItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  orderId   String
  productId String
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  status          OrderStatus    @default(PENDING)
  total           Float
  payedTotal      Float
  payedAt         DateTime?
  deliveredAt     DateTime?
  deadline        DateTime?
  note            String?
  paymentMethod   PaymentMethod
  deliveryMethod  DeliveryMethod
  customerId      String
  userId          String
  deliveryAddress Address?
  customer        Customer       @relation(fields: [customerId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum SupplyUnitType {
  KG
  G
  MG
  L
  ML
  UN
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
}
